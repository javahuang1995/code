链接：https://www.nowcoder.com/questionTerminal/661c49118ca241909add3a11c96408c8
来源：牛客网

1. 题目分析
题目要求n各学生中选择k个，使这k个学生的能力值乘积最大。
这是一个最优化的问题。
另外，在优化过程中，提出了相邻两个学生的位置编号差不超过d的约束。
如果不用递归或者动态规划，问题很难入手，并且，
限制条件d也需要对每一个进行约束，编程十分复杂
所以，解决的方法是采用动态规划（理由：
1.求解的是最优化问题；2.可以分解为最优子结构）
2. 问题分解
1.对该问题的分解是关键。
从n个学生中，选择k个，可以看成是：
先从n个学生里选择最后1个，然后在剩下的里选择k-1个，
并且让这1个和前k-1个满足约束条件
2.数学描述
为了能够编程实现，需要归纳出其递推公式，
而在写递推公式之前，首先又需要对其进行数学描述
记第k个人的位置为one,则可以用f[one][k]表示从n个人
中选择k个的方案。然后，它的子问题，需要从one前面的left个人里面，
选择k-1个，这里left表示k-1个人中最后一个（即第k-1个）人的位置，
因此，子问题可以表示成f[left][k-1].
学生能力数组记为arr[n+1],第i个学生的能力值为arr[i]
one表示最后一个人，其取值范围为[1,n];
left表示第k-1个人所处的位置，需要和第k个人的位置差不超过d，因此
max{k-1,one-d}<=left<=one-1
在n和k定了之后，需要求解出n个学生选择k个能力值乘积的最大值。
因为能力值有正有负，所以
当one对应的学生能力值为正时，
f[one][k] = max{f[left][k-1]arr[i]}(min{k-1,one-d}<=left<=one-1);
当one对应的学生能力值为负时
f[one][k] = max{g[left][k-1]arr[i]}(min{k-1,one-d}<=left<=one-1);
此处g[][]是存储n个选k个能力值乘积的最小值数组
3.编程实现
遍历。因为一般看解答的多半是自己遇到问题不大会的，
所以程序里面有写注释。如果大家不懂可以再问我，
我回复或者再把解答写详细点。欢迎讨论。
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner cin = new Scanner(System.in);
        int n = 0, k = 0, d = 0;
        int[] array = null;

        while (cin.hasNextInt()) {
            n = cin.nextInt();
            array = new int[n];
            for (int i = 0; i < n; i++) {
                array[i] = cin.nextInt();
            }
            k = cin.nextInt();
            d = cin.nextInt();
        }

        System.out.println(computeMaxProduct(array, k, d));
    }

    static long max(long a, long b) {
        return a > b ? a : b;
    };

    static long min(long a, long b) {
        return a < b ? a : b;
    };

    private static long computeMaxProduct(int[] array, int k, int d) {
        long dpMax[][] = new long[array.length][k + 1];
        long dpMin[][] = new long[array.length][k + 1];
        // dpMax[i][j] 表示以数组元素A【i】作结尾时， 序列长度为j的最大乘积结果
        for (int i = 0; i < array.length; i++) {
            dpMax[i][1] = array[i];
            dpMax[i][0] = array[0];
        }

        // 状态转移方程是 dpMax[i][j] = max(dpMax[i-1][j-1]* A[i], dpMin[i-d][j-1] *
        // A[i])

        long maxSoFar = Long.MIN_VALUE;
        for (int j = 2; j <= k; j++) {
            for (int i = j - 1; i < array.length; i++) {
                dpMax[i][j] = Long.MIN_VALUE;
                dpMin[i][j] = Long.MAX_VALUE;
                for (int x = 1; x <= d && (i - x) >= j - 2; x++) {
                    // 倒数第二个元素自己加上之前的元素数量至少还要有j-1个， 所以下标i-x需呀大于j-2
                    long resMax = max(dpMax[i - x][j - 1] * array[i], 
                    dpMin[i - x][j - 1] * array[i]);
                    long resMin = min(dpMax[i - x][j - 1] * array[i], 
                    dpMin[i - x][j - 1] * array[i]);

                    if (resMax > dpMax[i][j])
                        dpMax[i][j] = resMax;
                    if (resMin < dpMin[i][j])
                        dpMin[i][j] = resMin;

                }
            }
        }

        for (int i = k-1; i < array.length; i++) {
            if (dpMax[i][k] > maxSoFar) {
                maxSoFar = dpMax[i][k];
            }
        }

        return maxSoFar;

    }

}